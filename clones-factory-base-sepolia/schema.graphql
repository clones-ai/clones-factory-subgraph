type FactoryFunded @entity(immutable: true) {
  id: Bytes!
  factory: Bytes! # address
  token: Bytes! # address
  amount: BigInt! # uint256
  actualAmountReceived: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FactoryRefunded @entity(immutable: true) {
  id: Bytes!
  factory: Bytes! # address
  token: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FeeSweepFailed @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  treasury: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FeeSwept @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  treasury: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FeeUpdated @entity(immutable: true) {
  id: Bytes!
  oldFeeBps: Int! # uint16
  newFeeBps: Int! # uint16
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Initialized @entity(immutable: true) {
  id: Bytes!
  version: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Paused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RewardRecorded @entity(immutable: true) {
  id: Bytes!
  factory: Bytes! # address
  farmer: Bytes! # address
  token: Bytes! # address
  amount: BigInt! # uint256
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RewardsWithdrawn @entity(immutable: true) {
  id: Bytes!
  farmer: Bytes! # address
  token: Bytes! # address
  grossAmount: BigInt! # uint256
  feeAmount: BigInt! # uint256
  netAmount: BigInt! # uint256
  factoryCount: BigInt! # uint256
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleAdminChanged @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  previousAdminRole: Bytes! # bytes32
  newAdminRole: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleGranted @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleRevoked @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TaskCompleted @entity(immutable: true) {
  id: Bytes!
  taskId: Bytes! # bytes32
  farmer: Bytes! # address
  factory: Bytes! # address
  token: Bytes! # address
  amount: BigInt! # uint256
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TaskValidated @entity(immutable: true) {
  id: Bytes!
  taskId: Bytes! # bytes32
  farmer: Bytes! # address
  factory: Bytes! # address
  blockNumber: BigInt! # uint256
  blockHash: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenCooldownUpdated @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  oldCooldown: BigInt! # uint256
  newCooldown: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokensRecovered @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  to: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TreasuryUpdated @entity(immutable: true) {
  id: Bytes!
  oldTreasury: Bytes! # address
  newTreasury: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Unpaused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Upgraded @entity(immutable: true) {
  id: Bytes!
  implementation: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type WithdrawalNonceIncremented @entity(immutable: true) {
  id: Bytes!
  farmer: Bytes! # address
  oldNonce: BigInt! # uint256
  newNonce: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
